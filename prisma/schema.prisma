// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  name  String
  email String @unique

  staff         Boolean      @default(false)
  institution   Institution? @relation(name: "intstStaffs", fields: [institutionId], references: [id])
  institutionId String?

  avatarUrl String?

  password Password?
  messages Message[]
  chatMessages ChatMessage[]

  favInstitutions Institution[]
  favDirections   Direction[]

  trackedEvents Event[]

  chat Chat?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Institution {
  id String @id @default(cuid())

  name String
  city String

  directions Direction[]
  events     Event[]

  inFavs User[]
  staffs User[] @relation(name: "intstStaffs")
}

model Tag {
  id String @id @default(cuid())

  name String

  directions Direction[]
  events     Event[]
}

model Direction {
  id String @id @default(cuid())

  name        String
  description String

  institutions Institution[]
  tags         Tag[]

  inFavs User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id String @id @default(cuid())

  name        String
  description String
  date        DateTime
  public      Boolean  @default(false)

  institution   Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?

  tags     Tag[]
  messages Message[]

  inTracks User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  media Media[]

  createdAt DateTime @default(now())
}

model Media {
  id String @id @default(cuid())

  url String
  key String

  comment   Message @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
}

model Chat {
  id String @id @default(cuid())

  owner    User          @relation(fields: [ownerId], references: [id])
  ownerId  String        @unique
  messages ChatMessage[]

  createdAt DateTime @default(now())
}

model ChatMessage {
  id String @id @default(cuid())

  text   String
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now())
}
